{"version":3,"sources":["webpack:///./src/views/TimeTracking/BulkEdit.vue","webpack:///src/views/TimeTracking/BulkEdit.vue","webpack:///./src/views/TimeTracking/BulkEdit.vue?42c1","webpack:///./src/views/TimeTracking/BulkEdit.vue?15b5"],"names":["render","_vm","this","_c","_self","staticClass","attrs","_v","_s","$t","on","closePopup","DataLoaded","buttons","FormSchema","onSubmit","_e","staticRenderFns","props","selectedRecordValues","type","Array","required","AssignDpt","data","layoutType","Data","astype","label","name","value","placeholder","config","options","validationRules","mode","class","text","isVisible","onClick","created","GetTimerProjectsByUserID","LoadTask","GetCompanyTaglist","pushList","FetchData","methods","ths","vm","isLoading","DataService","then","response","res","forEach","item","obj","projectName","projectId","push","result","tagName","tagId","formfields","e","ids","tag_ids","title","project_id","task_id","length","substring","IsBillable","IsProjectBillable","track_id","track_description","formData","FormData","append","JSON","stringify","EditBulkTimeTrackEntry","status","ShowAlert","component"],"mappings":"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","file":"js/chunk-2d0e8e41.js","sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',{staticClass:\"my-popups\"},[_c('div',{staticClass:\"modal d-block\"},[_c('div',{staticClass:\"modal-dialog modal-dialog-centered ui-draggable\"},[_c('div',{staticClass:\"modal-content\"},[_c('div',{staticClass:\"modal-header ui-draggable-handle py-0\"},[_c('h4',{staticClass:\"modal-title mt-2 pt-1\",attrs:{\"name\":\"header\"}},[_vm._v(\" \"+_vm._s(_vm.$t('Edit 3 entries'))+\" \")]),_c('button',{staticClass:\"close\",on:{\"click\":_vm.closePopup}},[_c('em',{staticClass:\"fa fa-times\",attrs:{\"aria-hidden\":\"true\"}})])]),_c('div',{staticClass:\"listing py-3 px-3\"},[(_vm.DataLoaded)?_c('dynamic-form',{attrs:{\"lang\":\"en\",\"buttons\":_vm.buttons,\"schema\":_vm.FormSchema},on:{\"OnSubmit\":_vm.onSubmit}}):_vm._e()],1)])])])])\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template lang=\"en\">\r\n<div class=\"my-popups\">\r\n    <div class=\"modal d-block \">\r\n        <div class=\"modal-dialog modal-dialog-centered ui-draggable\">\r\n            <div class=\"modal-content\">\r\n\r\n                <div class=\"modal-header ui-draggable-handle  py-0\">\r\n                    <h4 name=\"header\" class=\"modal-title mt-2 pt-1\">\r\n                        {{ $t('Edit 3 entries') }}\r\n                    </h4>\r\n                    <button class=\"close\" v-on:click=\"closePopup\"><em aria-hidden=\"true\" class=\"fa fa-times\"></em> </button>\r\n                </div>\r\n                <div class=\"listing py-3 px-3\">\r\n                    <dynamic-form lang=\"en\" v-if=\"DataLoaded\" :buttons=\"buttons\" :schema=\"FormSchema\" v-on:OnSubmit=\"onSubmit\"></dynamic-form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n</template>\r\n\r\n<script>\r\nimport DataService from '../../services/DataService';\r\n\r\nexport default {\r\n    props: {\r\n        selectedRecordValues: {\r\n            type: Array,\r\n            required: true\r\n        },\r\n        AssignDpt: {\r\n            type: Array,\r\n            required: true\r\n        }\r\n    },\r\n    data() {\r\n        return {\r\n            FormSchema: [\r\n                {\r\n                    layoutType: \"single\",\r\n                    Data: [\r\n                        {\r\n                            astype: \"SelectField\",\r\n                            label: this.$t('Project'),\r\n                            name: \"project_id\",\r\n                            value: \"\",\r\n                            placeholder: \"\",\r\n                            config: {\r\n                                options: [],\r\n                            },\r\n                            validationRules: {\r\n                                //\"required\": true\r\n                            },\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    layoutType: \"single\",\r\n                    Data: [\r\n                         {\r\n                            astype: \"SelectField\",\r\n                            label: this.$t('Task'),\r\n                            name: \"task_id\",\r\n                            value: \"\",\r\n                            placeholder: \"\",\r\n                            config: {\r\n                                options: [],\r\n                            },\r\n                            validationRules: {\r\n                                //\"required\": true\r\n                            },\r\n                        }\r\n                    ]\r\n                },\r\n                {\r\n                    layoutType: \"single\",\r\n                    Data: [\r\n                        {\r\n                        astype: \"CustomSelectField\",\r\n                        label: this.$t('Tag'),\r\n                        name: \"tag_ids\",\r\n                        value: \"\",\r\n                        mode: \"tag\",\r\n                        placeholder: \"\",\r\n                        config: {\r\n                            options: [],\r\n\r\n                        },\r\n                    }\r\n                    ]\r\n                },\r\n                {\r\n                    layoutType: \"single\",\r\n                    Data: [{\r\n                        astype: \"ToggleField\",\r\n                        label: this.$t('Billing'),\r\n                        name: \"IsProjectBillable\",\r\n                        value: false,\r\n                        placeholder: \"\",\r\n                        validationRules: {\r\n                            \"required\": true\r\n                        },\r\n                        config: {\r\n                            options: [],\r\n\r\n                        },\r\n                    }, ],\r\n                },\r\n                {\r\n                    layoutType: \"single\",\r\n                    Data: [{\r\n                        astype: \"TextAreaField\",\r\n                        label: this.$t('Description'),\r\n                        name: \"track_description\",\r\n                        value: \"\",\r\n                        placeholder: \"\",\r\n                        validationRules: {\r\n                            //\"required\": true\r\n                        },\r\n                        config: {\r\n                            options: [],\r\n\r\n                        },\r\n                    }, ],\r\n                }\r\n            ],\r\n            buttons: [{\r\n                    type: \"submit\",\r\n                    class: \"btn btn-success\",\r\n                    text: \"<i class='fa fa-save pr-2'></i>Save\",\r\n                    isVisible: true,\r\n                },\r\n                {\r\n                    type: \"button\",\r\n                    class: \"btn btn-danger\",\r\n                    text: \"<i class='fa fa-close pr-2'></i>Cancel\",\r\n                    onClick: this.closePopup,\r\n                },\r\n            ],\r\n           // DataLoaded: 0,\r\n           //TagsSelectedArray: [],\r\n            //departmentList: [],\r\n            //newDepartmentlist: [],\r\n            //ListData: [],\r\n            //TagsSelectedArray1: [],\r\n            //tagsData: [],\r\n            //TagsSelectedArray2: [],\r\n            //TagsSelectedArray3: [],\r\n           // MultiArray: [],\r\n            //obj: ''\r\n        }\r\n    },\r\n    created: function () {\r\n        //this.GetCategoryList();\r\n        this.GetTimerProjectsByUserID();\r\n        this.LoadTask();\r\n        this.GetCompanyTaglist();\r\n        this.DataLoaded = 1;\r\n        this.pushList();\r\n        this.FetchData(this.AssignDpt);\r\n    },\r\n    methods: {\r\n        FetchData: function (ths) {\r\n           // var vm = this;\r\n            //var url = `applicationId=${ths.ApplicationId}`;\r\n            //DataService.GetAssignDepartmentByApplicationId(url).then(response => {\r\n                /*\r\n                var data = {\r\n                    name: ths.category_name,\r\n                    value: ths.category_id\r\n                }\r\n                vm.FormSchema[0].Data[0].value = data.value;\r\n\r\n                var obj1 = ths.TimeDuration\r\n                vm.FormSchema[0].Data[2].value = obj1;\r\n\r\n                var obj2 = {\r\n                    label: ths.ApplicationName,\r\n                    value: ths.ApplicationId\r\n                }*/\r\n                //vm.FormSchema[0].Data[0].value = obj2;\r\n\r\n                //vm.tagsData = response.data\r\n                /*\r\n                vm.tagsData.forEach((item, index) => {\r\n                    if (item.productive_type == \"Productive\") {\r\n                        vm.TagsSelectedArray1.push({\r\n                            label: item.department_name,\r\n                            value: item.department_id\r\n                        })\r\n                    } else if (item.productive_type == \"UnProductive\") {\r\n                        vm.TagsSelectedArray2.push({\r\n                            label: item.department_name,\r\n                            value: item.department_id\r\n                        })\r\n                    } else if (item.productive_type == \"Neutral\") {\r\n                        vm.TagsSelectedArray3.push({\r\n                            label: item.department_name,\r\n                            value: item.department_id\r\n                        })\r\n                    }\r\n                })*/\r\n                //vm.FormSchema[1].Data[0].value = vm.TagsSelectedArray1;\r\n                //vm.FormSchema[1].Data[0].value = vm.TagsSelectedArray2;\r\n                //vm.FormSchema[1].Data[2].value = vm.TagsSelectedArray3;\r\n            //})\r\n        },\r\n        /*\r\n        async GetCategoryList() {\r\n            var vm = this;\r\n            vm.isLoading = true;\r\n            await DataService.GetCategoryListing()\r\n                .then(function (response) {\r\n                    JSON.parse(response.data).data.forEach(item => {\r\n                        vm.obj = {\r\n                            name: item.category_name,\r\n                            value: item.category_id\r\n                        }\r\n                        vm.FormSchema[1].Data[0].config.options.push(vm.obj);\r\n                    });\r\n                    vm.isLoading = false;\r\n                });\r\n        },\r\n        */\r\n        async GetTimerProjectsByUserID() {\r\n            var vm = this;\r\n            vm.isLoading = true;\r\n            await DataService.GetTimerProjectsByUserID()\r\n                .then(function (response) {\r\n                    response.data.res.forEach(item => {\r\n                        vm.obj = {\r\n                            name: item.projectName,\r\n                            value: item.projectId\r\n                        }\r\n                        vm.FormSchema[0].Data[0].config.options.push(vm.obj);\r\n                    });\r\n\r\n                    vm.isLoading = false;\r\n                });\r\n        },\r\n        async LoadTask() {\r\n            var vm = this;\r\n            vm.isLoading = true;\r\n            await DataService.LoadTask()\r\n                .then(function (response) {\r\n                    response.data.forEach(item => {\r\n                        vm.obj = {\r\n                            name: item.text,\r\n                            value: item.value\r\n                        }\r\n                        vm.FormSchema[1].Data[0].config.options.push(vm.obj);\r\n                    });\r\n\r\n                    vm.isLoading = false;\r\n                });\r\n        },\r\n          async GetCompanyTaglist() {\r\n            var vm = this;\r\n            vm.isLoading = true;\r\n            await DataService.GetCompanyTaglist()\r\n                .then(function (response) {\r\n                    response.data.result.forEach(item => {\r\n                        vm.obj = {\r\n                            name: item.tagName,\r\n                            value: item.tagId\r\n                        }\r\n                        vm.FormSchema[2].Data[0].config.options.push(vm.obj);\r\n                    });\r\n\r\n                    vm.isLoading = false;\r\n                });\r\n        },\r\n        async onSubmit(formfields, e) {\r\n            debugger\r\n        \r\n            var vm = this;\r\n            var ids = '';\r\n            formfields.tag_ids.forEach(item => {\r\n                ids += item.value + ','\r\n            });\r\n            var obj = {\r\n                title: formfields.title,\r\n                project_id: formfields.project_id,\r\n                task_id: formfields.task_id,\r\n                tag_ids: ids.length > 0 ? ids.substring(0, ids.length - 1) : '',\r\n                IsBillable: formfields.IsProjectBillable,\r\n                track_id: 1023747,\r\n                track_description: formfields.track_description\r\n            }\r\n            vm.isLoading = true;\r\n            var formData = new FormData();\r\n            formData.append(\"postString\", JSON.stringify(obj));\r\n            await DataService.EditBulkTimeTrackEntry(JSON.stringify(obj)).then(response => {\r\n                vm.isLoading = false;\r\n                if (response.data.status == 0) {\r\n                    vm.ShowAlert(vm.$t('TrackEntriesiscreated'), \"success\", false, vm.$t(\"Alert\"));\r\n                }\r\n                //vm.$parent.FetchData();\r\n                //vm.closePopup();\r\n            });\r\n           \r\n        },\r\n        closePopup() {\r\n            //var vm = this;\r\n            //vm.TagsSelectedArray = [];\r\n            //vm.selectedRecordValues = [];\r\n            //vm.$parent.CloseAssignDepartmentClick();\r\n        },\r\n        pushList() {\r\n            //debugger\r\n            /*\r\n            var vm = this\r\n            vm.selectedRecordValues.forEach((item) => {\r\n                vm.TagsSelectedArray.push({\r\n                    label: item.ApplicationName,\r\n                    value: item.ApplicationId\r\n                })\r\n                vm.FormSchema[0].Data[0].config.options.push({\r\n                    name: item.ApplicationName,\r\n                    value: item.ApplicationId\r\n                })\r\n            })\r\n            vm.FormSchema[0].Data[0].value = vm.TagsSelectedArray;\r\n            */\r\n        }\r\n    }\r\n\r\n}\r\n</script>\r\n","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./BulkEdit.vue?vue&type=script&lang=js\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./BulkEdit.vue?vue&type=script&lang=js\"","import { render, staticRenderFns } from \"./BulkEdit.vue?vue&type=template&id=7f252432&lang=en\"\nimport script from \"./BulkEdit.vue?vue&type=script&lang=js\"\nexport * from \"./BulkEdit.vue?vue&type=script&lang=js\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}