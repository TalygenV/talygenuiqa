{"version":3,"sources":["webpack:///./src/views/HelpAndGuide/GetQuickAddLayoutForm.vue","webpack:///src/views/HelpAndGuide/GetQuickAddLayoutForm.vue","webpack:///./src/views/HelpAndGuide/GetQuickAddLayoutForm.vue?0a79","webpack:///./src/views/HelpAndGuide/GetQuickAddLayoutForm.vue?78a8"],"names":["render","_vm","this","_c","_self","attrs","isLoading","staticClass","_v","_s","$t","submodulecode","on","$event","closepopup","ref","formdoesnotexsist","buttons","FormSchema","scopedSlots","_u","key","fn","data","class","error","editor","onReady","updateCkeditorModel","model","value","fieldInfo","callback","$$v","$set","expression","directives","name","rawName","domProps","target","composing","Currency","limitLength","GetAssetCost","GetUnitPrice","options","TreeValue","config","showAddIcon","AddLocation","_e","staticRenderFns","components","Treeselect","props","getvalues","type","Object","required","submodulename","String","CLASSIC_EDITOR","allowedPerFileSizeInMb","UserName","UserId","modulename","FindalLocationArray","DisallowedFileType","fileMulitpleData","text","onClick","Submit","isVisible","acceptArray","vm","GetUserInfo","ID","Name","module_name","GetLocationByCompanyId","GetAllowFileType","getForm","methods","DataService","then","response","AllowedFileTypes","split","forEach","fileType","fileTypeWithoutDot","trim","replace","push","iconClass","$parent","closewizardpopup","values","sub_module_code","param","GetFormCustomLayout","TicketCategoryMandatory","TicketProductMandatory","undefined","configData","length","configResult","row","CORE_CONFIG_KEY","CONFIG_DATA_VALUE","frmSchma","$refs","ManageForm","ConvertCustomFieldIntoDynamicFormObj","group","gi","Data","field","fi","astype","xvalue","x","i","toUpperCase","maxSize","fileTypeList","AttachmentDisallowedFileType","reject","onChange","GetBase64String","onAddButtonClick","multiple","$route","params","id","validationRules","visibility","is_required","FromPage","mode","showLabel","GetBase64StringAsset","onDeleteSelectedFiles","accept","Date","format","filter","toLowerCase","minDate","onChangeEventForFields","onchangeselectfields","y","z","url","fieldCode","GetDDLData","json","DATA","UpdateKeyValue","parseFloat","unitPrice","assetCost","toFixed","labelKey","updateProperty","event","Quantity","slice","ShowAlert","val","validateForm","validate","result","CustomFieldArray","ConvertDynamicFormObjToCustomFieldObj","item","index","field_name","field_value","tagIdArray","tagObject","tagId","tagIdString","map","join","obj","moduleCode","subModuleCode","attachmentData","IsDuplicateAssetCatalog","JSON","stringify","isSave","newItem","itemCode","SaveDynamicForm","Status","popupCondition","ShowAddProduct","e","ui","getEditableElement","parentElement","insertBefore","view","toolbar","element","GetLocationByuserId","reqForm","GetParentDetails","COMPANY_LOCATION_ID","CheckIfExist","el","PARENT_LOCATION_ID","locationId","rslt","getChildLocation","currentItem","treeArray","label","LOCATION_NAME","retrunArray","childArray","finalChildArray","ChildfolderId","CheckIfExist1","children","evt","f","files","reader","FileReader","fileObj","onload","theFile","binaryData","base64StringEncoded","window","btoa","fileName","n","lastIndexOf","extensionName","substring","fileExt","attachemnetMime","size","fileSize","attachement_mime","base64String","contentType","ModuleName","SubModuleCode","readAsBinaryString","ex","component"],"mappings":"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","file":"js/chunk-2d0b3dad.js","sourcesContent":["var render = function render(){var _vm=this,_c=_vm._self._c;return _c('div',[_c('loader',{attrs:{\"is-visible\":_vm.isLoading}}),_c('div',{staticClass:\"my-popups\"},[_c('div',{staticClass:\"modal d-block\"},[_c('div',{staticClass:\"modal-dialog modal-dialog-centered ui-draggable\"},[_c('div',{staticClass:\"modal-content\"},[_c('div',{staticClass:\"modal-header ui-draggable-handle py-0\"},[_c('div',{staticClass:\"theme-primary partition-full\"},[_c('span',{staticClass:\"p-name text-white\"},[_vm._v(_vm._s(_vm.$t(_vm.submodulecode)))])]),_c('button',{staticClass:\"close\",attrs:{\"type\":\"button\"},on:{\"click\":function($event){return _vm.closepopup()}}},[_c('em',{staticClass:\"fa fa-times\",attrs:{\"aria-hidden\":\"true\"}})])]),_c('div',{staticClass:\"border p-3 scroll w-100\"},[_c('Form',{ref:\"myForm\"},[(_vm.formdoesnotexsist==false)?_c('dynamic-form',{ref:\"ManageForm\",attrs:{\"lang\":\"en\",\"buttons\":_vm.buttons,\"schema\":_vm.FormSchema},scopedSlots:_vm._u([{key:\"tgslot-comment\",fn:function({ data }){return [_c('ckeditor',{class:{ 'is-invalid': data.error != '' },attrs:{\"editor\":_vm.editor},on:{\"ready\":_vm.onReady,\"input\":function($event){return _vm.updateCkeditorModel($event, data)}},model:{value:(data.fieldInfo.value),callback:function ($$v) {_vm.$set(data.fieldInfo, \"value\", $$v)},expression:\"data.fieldInfo.value\"}}),_c('span',{staticClass:\"invalid-feedback\"},[_vm._v(_vm._s(data.error))]),_c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(data.fieldInfo.value),expression:\"data.fieldInfo.value\"}],attrs:{\"type\":\"hidden\"},domProps:{\"value\":(data.fieldInfo.value)},on:{\"input\":function($event){if($event.target.composing)return;_vm.$set(data.fieldInfo, \"value\", $event.target.value)}}})]}},{key:\"tgslot-unit_price\",fn:function({ data }){return [_c('div',{staticClass:\"input-group\"},[_c('span',{staticClass:\"input-group-append\"},[_c('span',{staticClass:\"input-group-text\",attrs:{\"id\":\"spnOutOF\"}},[_vm._v(_vm._s(_vm.Currency))])]),_c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(data.fieldInfo.value),expression:\"data.fieldInfo.value\"}],staticClass:\"form-control no-spinner\",attrs:{\"type\":\"number\",\"name\":\"unitprice\",\"min\":\"0\",\"maxlength\":5,\"step\":\"any\",\"pattern\":\"\\\\d+\\\\.?\\\\d?(?!\\\\d)\"},domProps:{\"value\":(data.fieldInfo.value)},on:{\"input\":[function($event){if($event.target.composing)return;_vm.$set(data.fieldInfo, \"value\", $event.target.value)},_vm.limitLength],\"keyup\":function($event){return _vm.GetAssetCost($event, data.fieldInfo.value)}}})])]}},{key:\"tgslot-asset_cost\",fn:function({ data }){return [_c('div',{staticClass:\"input-group\"},[_c('span',{staticClass:\"input-group-append\"},[_c('span',{staticClass:\"input-group-text\",attrs:{\"id\":\"spnOutOF\"}},[_vm._v(_vm._s(_vm.Currency))])]),_c('input',{directives:[{name:\"model\",rawName:\"v-model\",value:(data.fieldInfo.value),expression:\"data.fieldInfo.value\"}],staticClass:\"form-control no-spinner\",attrs:{\"type\":\"number\",\"min\":0},domProps:{\"value\":(data.fieldInfo.value)},on:{\"keyup\":function($event){return _vm.GetUnitPrice(data.fieldInfo.value)},\"input\":function($event){if($event.target.composing)return;_vm.$set(data.fieldInfo, \"value\", $event.target.value)}}})])]}},{key:\"tgslot-location_id\",fn:function({ data }){return [_c('div',{staticClass:\"input-group custlocation\"},[_c('tree-view',{class:{ 'form-control': true, },attrs:{\"options\":_vm.options,\"placeholder\":\"Select Location\",\"show-count\":true},model:{value:(_vm.TreeValue),callback:function ($$v) {_vm.TreeValue=$$v},expression:\"TreeValue\"}}),(data.fieldInfo.config.showAddIcon)?_c('div',{staticClass:\"ml-2 mt-1\"},[_c('a',{staticClass:\"round-icon-small btn-dark theme-primary\",on:{\"click\":_vm.AddLocation}},[_c('i',{staticClass:\"fa fa-plus text-white pt-7 font-18\",attrs:{\"alt\":\"+\"}})])]):_vm._e()],1)]}}],null,false,902536046)}):_vm._e(),(_vm.formdoesnotexsist)?_c('div',{staticClass:\"alert alert-danger p-2 text-center\",attrs:{\"role\":\"alert\"}},[_vm._v(\" Form does not exsist. \")]):_vm._e()],1)],1)])])])])],1)\n}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","\r\n<template>\r\n\r\n    <div>\r\n        <loader :is-visible=\"isLoading\"></loader>\r\n        <div class=\"my-popups\">\r\n            <div class=\"modal d-block \">\r\n                <div class=\"modal-dialog modal-dialog-centered ui-draggable\">\r\n                    <div class=\"modal-content\">\r\n                        <div class=\"modal-header ui-draggable-handle  py-0\">\r\n                            <div class=\"theme-primary partition-full\">\r\n                                <span class=\"p-name text-white\">{{ $t(submodulecode) }}</span>\r\n                            </div>\r\n                            <button type=\"button\" class=\"close\" @click=closepopup()>\r\n                                <em aria-hidden=\"true\" class=\"fa fa-times\"></em>\r\n                            </button>\r\n                        </div>\r\n                        <div class=\"border p-3 scroll w-100\">\r\n                            <Form ref=\"myForm\">\r\n                            <dynamic-form lang=\"en\"  ref=\"ManageForm\"  :buttons=\"buttons\" :schema=\"FormSchema\" v-if=\"formdoesnotexsist==false\">\r\n                                <template v-slot:tgslot-comment=\"{ data }\">\r\n                                    <ckeditor :editor=\"editor\"   @ready=\"onReady\" v-model=\"data.fieldInfo.value\"\r\n                                        @input=\"updateCkeditorModel($event, data)\" :class=\"{ 'is-invalid': data.error != '' }\">\r\n                                    </ckeditor>\r\n                                    <span class=\"invalid-feedback\">{{ data.error }}</span>\r\n                                    <input type=\"hidden\" v-model=\"data.fieldInfo.value\" />\r\n                                </template>\r\n\r\n                                                                <!-- for Asset Add Product start-->\r\n                                                                <template v-slot:tgslot-unit_price=\"{ data }\">\r\n                                    <!-- <Field :rules=\"{ 'required': false,'max': 5 }\" class=\"w-100\"  name=\"Unit Price\" v-slot=\"{ errors }\">                                  -->\r\n                                    <div class=\"input-group\">\r\n                                        <span class=\"input-group-append\">\r\n                                            <span class=\"input-group-text\" id=\"spnOutOF\">{{ Currency }}</span>\r\n                                        </span>\r\n                                        <input type=\"number\" name=\"unitprice\" min=\"0\" :maxlength=\"5\" step=\"any\"\r\n                                            class=\"form-control no-spinner\" v-on:input=\"limitLength\"\r\n                                            v-on:keyup=\"GetAssetCost($event, data.fieldInfo.value)\"\r\n                                            pattern=\"\\d+\\.?\\d?(?!\\d)\" v-model=\"data.fieldInfo.value\">\r\n\r\n                                    </div>\r\n                                    <!-- <span v-if=\"errors[0]\" name=\"unitprice\" class=\"invalid-feedback d-block\">{{errors[0]}}</span>\r\n                                    </Field> -->\r\n\r\n                                </template>\r\n                                <template v-slot:tgslot-asset_cost=\"{ data }\">\r\n\r\n                                    <div class=\"input-group\">\r\n                                        <span class=\"input-group-append\">\r\n                                            <span class=\"input-group-text\" id=\"spnOutOF\">{{ Currency }}</span>\r\n                                        </span>\r\n                                        <input type=\"number\" :min=\"0\" class=\"form-control no-spinner\"\r\n                                            v-on:keyup=\"GetUnitPrice(data.fieldInfo.value)\"\r\n                                            v-model=\"data.fieldInfo.value\">\r\n\r\n                                    </div>\r\n                                </template>\r\n                                <template v-slot:tgslot-location_id=\"{ data }\">\r\n                                    <div class=\"input-group custlocation\">\r\n                                        <!-- <Field name=\"Location\" :rules=\"{ 'required': true }\" v-slot=\"{ errors }\">  'is-invalid': errors[0]-->\r\n                                        <tree-view v-model=\"TreeValue\" :options=\"options\" placeholder=\"Select Location\"\r\n                                            :show-count=\"true\" v-bind:class=\"{ 'form-control': true, }\">\r\n                                        </tree-view>\r\n                                        <!-- <span v-if=\"errors[0]\" name=\"Location\" class=\"invalid-feedback d-block\">{{ errors[0] }}</span>\r\n                                        </Field> -->\r\n                                        <div class=\"ml-2 mt-1\" v-if=\"data.fieldInfo.config.showAddIcon\">\r\n                                            <a v-on:click=\"AddLocation\" class=\"round-icon-small btn-dark theme-primary\">\r\n                                                <i alt=\"+\" class=\"fa fa-plus text-white pt-7 font-18\"></i>\r\n                                            </a>\r\n                                        </div>\r\n                                    </div>\r\n                                </template>\r\n                            </dynamic-form>\r\n                            \r\n                            <!-- <div v-if=\"formdoesnotexsist\" class=\"text center danger \">Form doesnt exsist </div> -->\r\n\r\n                            <div  v-if=\"formdoesnotexsist\" class=\"alert alert-danger p-2 text-center\" role=\"alert\">\r\n                                Form does not exsist.\r\n                             </div>\r\n                       </Form>\r\n                         \r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\nimport DataService from '../../services/DataService';\r\nimport Treeselect from '@riophae/vue-treeselect'\r\nimport '@riophae/vue-treeselect/dist/vue-treeselect.css'\r\nexport default {\r\n    components: {\r\n        'tree-view': Treeselect\r\n    },\r\n    props: {\r\n        getvalues: {\r\n            type: Object,\r\n            required: true\r\n        },\r\n        submodulename:{\r\n            type: String,\r\n            required: true\r\n        }\r\n    },\r\n    data() {\r\n        return {\r\n            editor: this.CLASSIC_EDITOR,\r\n            formdoesnotexsist:false,\r\n            isLoading: false,\r\n            allowedPerFileSizeInMb:5,\r\n            // Id:this.$route.params.id,\r\n            UserName: null,\r\n            UserId: null,\r\n            FormSchema: [],\r\n            modulename: '',\r\n            submodulecode: '',\r\n            TreeValue:null,\r\n            FindalLocationArray:[],\r\n            DisallowedFileType:[],\r\n            options: [],\r\n            fileMulitpleData:[],\r\n            Currency:'',\r\n            buttons: [{\r\n                type: \"submit\",\r\n                class: \"btn btn-success\",\r\n                text: \"<i class='fa fa-save pr-2'></i>Save\",\r\n                onClick: this.Submit\r\n            },\r\n            {\r\n                type: \"button\",\r\n                class: \"btn btn-danger\",\r\n                text: \"<i class='fa fa-close pr-2'></i>Cancel\",\r\n                onClick: this.closepopup,\r\n                isVisible: true,\r\n            },\r\n            ],\r\n            acceptArray: []\r\n            // isSuccessMessage: false,\r\n        }\r\n    },\r\n    async created() {\r\n        var vm = this;\r\n        vm.UserId = vm.GetUserInfo.ID;\r\n        vm.UserName = vm.GetUserInfo.Name;\r\n        vm.Currency = this.GetUserInfo.Currency;\r\n        if (vm.getvalues.module_name === \"Asset\") {\r\n            await vm.GetLocationByCompanyId();\r\n            await vm.GetAllowFileType();\r\n        }\r\n        vm.getForm(vm.getvalues);\r\n    },\r\n    methods: {\r\n        \r\n        async GetAllowFileType() {\r\n            var vm = this;\r\n            await DataService.GetAllowFileType().then((response) => {\r\n\r\n                if (response.data != null) {\r\n                    const AllowedFileTypes = response.data.AllowedFileTypes.split(',');\r\n\r\n                    AllowedFileTypes.forEach(fileType => {\r\n                        // Remove dots from file types\r\n                        const fileTypeWithoutDot = fileType.trim().replace(/\\./g, ''); // Remove dots and trim whitespace\r\n\r\n                        vm.acceptArray.push({\r\n                            fileType: fileTypeWithoutDot,\r\n                            iconClass: 'fa-file-image-o'\r\n                        });\r\n                    });\r\n                }\r\n\r\n            });\r\n\r\n        },\r\n        closepopup() {\r\n            var vm = this;\r\n            vm.$parent.closewizardpopup();\r\n        },\r\n        getForm: function (values) {            \r\n            var vm = this;  \r\n            vm.isLoading = true;\r\n            vm.modulename = values.module_name;\r\n            vm.submodulecode = values.sub_module_code\r\n            if(vm.modulename==\"\" &&  vm.submodulecode==\"Ticketing\"){\r\n                vm.modulename= \"Ticketing\"\r\n            }\r\n            var param = `id=&moduleName=${ vm.modulename}&subModuleCode=${vm.submodulecode}&otherData=&langCode=en&CustomLayoutId=&usefor=QuickAdd`;\r\n            DataService.GetFormCustomLayout(param).then(function (response) {\r\n                if (response != null && response.data != null && response.data != \"\") {\r\n                    vm.formdoesnotexsist=false;\r\n                    var TicketCategoryMandatory, TicketProductMandatory;\r\n\r\n                    if ( (typeof(response.data.configData) !=undefined ) && response.data.configData !=null && response.data.configData.length > 0) {\r\n                        var configResult = response.data.configData;\r\n                        configResult.forEach(function (row) {\r\n                            if (row.CORE_CONFIG_KEY == \"TicketFileSize\") {\r\n                                vm.allowedPerFileSizeInMb = row.CONFIG_DATA_VALUE;\r\n                            }\r\n                            if (row.CORE_CONFIG_KEY == \"TicketCategoryOptionMandatory\") {\r\n                                TicketCategoryMandatory = row.CONFIG_DATA_VALUE;\r\n                            }\r\n                            if (row.CORE_CONFIG_KEY == \"TicketProductOptionMandatory\") {\r\n                                TicketProductMandatory = row.CONFIG_DATA_VALUE;\r\n                            }\r\n                            if (row.CORE_CONFIG_KEY == \"TicketDisallowedFileTypes\") {\r\n                                vm.DisallowedFileType = row.CONFIG_DATA_VALUE;\r\n\r\n                            }\r\n                        });\r\n                    }\r\n                    var frmSchma = vm.$refs.ManageForm.ConvertCustomFieldIntoDynamicFormObj(response.data.data);\r\n                    debugger\r\n                    frmSchma.forEach((group, gi) => {                        \r\n                        group.Data.forEach((field, fi) => {\r\n                            // if(field.astype == 'SelectField'){ \r\n                            //     if (field && field.config) {\r\n                            //         field.config =\r\n                            //         {\r\n                            //         onChange: vm.onchangeselectfields\r\n                            //         }\r\n                            //     }  \r\n                            // }\r\n                            if(field.astype == 'RadioField'){\r\n                                var xname='';\r\n                                var xvalue='';\r\n                                field.config.options.forEach((x,i)=>{\r\n                                    if(i==0){ \r\n                                        xvalue=x.value\r\n                                    }\r\n                                })\r\n                                   field.value=xvalue;\r\n                            }\r\n                            if(field.astype == 'FileField'  && values.sub_module_code.toUpperCase() != 'MANAGE_PRODUCT'){\r\n                                if (field && field.config) {\r\n                                    field.config.maxSize = vm.allowedPerFileSizeInMb;\r\n                                }\r\n                                if (field && field.config) {\r\n\r\n                                 let fileTypeList = vm.AttachmentDisallowedFileType(vm.DisallowedFileType);\r\n                                if (fileTypeList != null) {\r\n                                    field.config =\r\n                                    {\r\n                                        maxSize: vm.allowedPerFileSizeInMb,\r\n                                        reject: fileTypeList,\r\n                                        showAddIcon: false,\r\n                                        onChange: vm.GetBase64String,\r\n                                        onAddButtonClick: '',\r\n                                        multiple: true\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                            \r\n                            if(values.sub_module_code == 'Ticketing'){\r\n                                if (field.name == \"is_read\") {\r\n                                    field.value = 0;\r\n                                }\r\n                                // if (field.name == \"status_id\") {\r\n                                //     if(field.config.options.length > 0)\r\n                                //     {\r\n                                //         field.value = 1111;\r\n                                //     }                               \r\n                                // }\r\n                                if (field.name == \"ticket_for\" && vm.$route.params.id == \"0\") {\r\n                                    field.value = \"1\";\r\n                                }\r\n                                if (field.name == \"ticket_category_id\") {\r\n                                    if (TicketCategoryMandatory == \"yes\") {\r\n                                        field.validationRules.required = true;\r\n                                    }\r\n                                    else {\r\n                                        field.validationRules.required = false;\r\n                                    }\r\n\r\n                                }\r\n\r\n                                if (field.name == \"product_id\") {\r\n                                    if (TicketProductMandatory == \"yes\") {\r\n                                        field.validationRules.required = true;\r\n                                    } else {\r\n                                        field.validationRules.required = false;\r\n                                    }\r\n                                }\r\n                            }\r\n                             if (values.sub_module_code.toUpperCase() == 'MANAGE_PRODUCT') {\r\n\r\n                                if (field.name == \"deployement_type\" || field.name == \"location_id\" || field.name == \"quantity\" || field.name == \"unit_price\" || field.name == \"asset_cost\") {\r\n                                    field.visibility = false;\r\n                                    group.visibility = false;\r\n                                }\r\n                                if (field.name == \"quantity\") {\r\n                                    //field.is_required = true;\r\n                                    //field.validationRules = { 'required': true, max: 7 }\r\n                                    // if(item.name=='quantity'){\r\n                                    //     field.is_required = true; \r\n                                    //     field.validationRules= {'required':item.is_required, max: item.length}\r\n                                    // }\r\n                                }\r\n                                if (field.name == \"unit_price\") {\r\n                                    field.astype = 'SlotField';\r\n                                    //field.is_required = false;\r\n                                    //field.validationRules = { 'required': false, max: 5 }\r\n                                    // if(item.name=='unit_price'){\r\n                                    //     field.validationRules= {'required':item.is_required, max: item.length}\r\n                                    // }\r\n                                }\r\n                                if (field.name == \"asset_cost\") {\r\n                                    field.astype = 'SlotField';\r\n                                    //field.validationRules= {'required':item.is_required, max: item.length}         \r\n\r\n                                    //field.validationRules= \"max:5\"\r\n                                }\r\n                                if (field.name == \"location_id\") {\r\n                                    //field.config.showAddIcon = true;\r\n                                    //field.config.onAddButtonClick = vm.AddLocation;                              \r\n                                    field.astype = 'SlotField';\r\n                                    field.is_required = false;\r\n\r\n                                }\r\n\r\n                                if (field.name == \"deployement_type\") {\r\n                                    ////debugger;\r\n                                    field.value = \"1\";\r\n                                    //field.display_order = 2;\r\n                                }\r\n                                if (field.name == \"type\") {\r\n                                    ////debugger;\r\n                                    field.value = false;\r\n                                    //field.display_order = 1\r\n                                }\r\n\r\n                                if (field.name == \"create_unique_name_list\") {\r\n                                    field.value = false;\r\n                                    //field.required\r\n                                }\r\n                                if (field.name == \"asset_type_id\") {\r\n                                    if (vm.FromPage != 'AdvanceSettings') {\r\n                                        // field.config.showAddIcon = true;\r\n                                        //  field.config.onAddButtonClick = vm.OpenAddProductTypePopup;\r\n                                    }\r\n                                }\r\n                                if (field.name == \"tag_id\") {\r\n                                    field.mode = \"tag\"\r\n                                    //field.is_required = false;\r\n                                    // field.config.showAddIcon = true;\r\n                                    //field.config.onAddButtonClick = vm.OpenAddTagPopup;\r\n                                }\r\n                                if (field.name == \"type\") {\r\n                                    field.value = false\r\n                                    field.is_required = true;\r\n                                }\r\n                                if (field.name == \"status_id\") {\r\n                                    field.value = '1001'\r\n                                    field.visibility = false;\r\n                                }\r\n                                if (field.name == \"attachment_path\") {\r\n                                    field.showLabel = true;\r\n                                    let fileTypeList = \"\";//vm.AttachmentDisallowedFileType(vm.AllowedFileType);\r\n                                    if (fileTypeList != null) {\r\n                                        //debugger;\r\n                                        field.config =\r\n                                        {\r\n                                            maxSize: 5,\r\n                                            //accept: fileTypeList,\r\n                                            onChange: vm.GetBase64StringAsset,\r\n                                            onDeleteSelectedFiles: vm.onDeleteSelectedFiles,\r\n                                            accept: vm.acceptArray,\r\n                                            // accept: [{\r\n                                            //     fileType: 'jpg', // Image types\r\n                                            //     iconClass: 'fa-file-image-o' // Icon class for images\r\n                                            // },\r\n                                            // {\r\n                                            //     fileType: 'jpeg', // Image types\r\n                                            //     iconClass: 'fa-file-image-o' // Icon class for images\r\n                                            // },\r\n                                            // {\r\n                                            //     fileType: 'png', // Image types\r\n                                            //     iconClass: 'fa-file-image-o' // Icon class for images\r\n                                            // },\r\n                                            //     // Add more image, document, text, and video types as needed\r\n                                            // ],\r\n                                            showAddIcon: false,\r\n                                            onAddButtonClick: '',\r\n                                            multiple: false\r\n                                        }\r\n                                    }\r\n\r\n                                }\r\n                               \r\n                            }\r\n                            if(values.sub_module_code.toUpperCase() == 'CRM_LEADS'){                                \r\n                                if (field.name == 'lead_date' && field.value == '') {\r\n                                    field.value = new Date();\r\n                                    field.config = { mode: 'date', format: \"M/D/YYYY\" }\r\n                                }\r\n                                if (field.name == 'status_id' && field.value == '') {\r\n                                    field.value = field.config.options.filter(x=>x.name.toLowerCase()=='active')[0].value;\r\n                                }                                \r\n                                if(field.name=='expected_close_date'){\r\n                                    field.config = { mode: 'date', format: \"M/D/YYYY\", minDate: new Date() }\r\n                                }\r\n                            }\r\n                            if(values.sub_module_code.toUpperCase() == 'CRM_DEALS'){\r\n                                if (field.name == 'closing_date' && field.value == '') {\r\n                                     field.value = new Date();\r\n                                     field.config = { mode: 'date', format: \"M/D/YYYY\" }\r\n                                }\r\n                            }\r\n                            field.config.onChange = vm.onChangeEventForFields;\r\n                        })\r\n\r\n                    });\r\n                    debugger\r\n                    vm.FormSchema = frmSchma\r\n                    vm.isLoading = false;\r\n                }\r\n                else{\r\n                    vm.isLoading = false;\r\n                    vm.formdoesnotexsist=true;\r\n                }\r\n            });\r\n        },\r\nonchangeselectfields(x,y,z){\r\n    debugger\r\n    var vm = this;\r\n    if (x == \"FILL_DEPENDENT\") {\r\n                y.config.options = [];\r\n                var url = `id=&moduleName=TICKETING&type=${y.config.fieldCode}&search=&refId=${z}`;\r\n                DataService.GetDDLData(url).then(function (response) {\r\n                    if (response.data) {\r\n                        var json = response.data;\r\n                        if (json != null) {\r\n                            y.config.options = response.data.DATA;\r\n                            vm.$refs.ManageForm.UpdateKeyValue();\r\n                        }\r\n                    }\r\n                });\r\n            }\r\n},\r\nonChangeEventForFields: function (x, y, z) {\r\n            debugger\r\n            let vm = this;\r\n            if (y.name == \"type\") {\r\n                vm.FormSchema.forEach((group, gi) => {\r\n                    group.Data.forEach((field, fi) => {\r\n                        if (y.value) {\r\n\r\n                            if (field.name == \"deployement_type\" || field.name == \"location_id\" || field.name == \"quantity\" || field.name == \"unit_price\" || field.name == \"asset_cost\") {\r\n                                field.visibility = true;\r\n                                group.visibility = true;\r\n                            }\r\n                            if (field.name == \"location_id\")\r\n                            {\r\n                                field.is_required=true;    \r\n                            }\r\n                        } else {\r\n                            if (field.name == \"deployement_type\" || field.name == \"location_id\" || field.name == \"quantity\" || field.name == \"unit_price\" || field.name == \"asset_cost\") {\r\n                                field.visibility = false;\r\n                                group.visibility = false;\r\n                            }\r\n                            if (field.name == \"location_id\")\r\n                            {\r\n                                field.is_required=false;    \r\n                            }\r\n                        }\r\n                    });\r\n                });\r\n            }\r\n            if (y.name == \"attachment_path\") {\r\n                vm.GetBase64StringAsset(y.value);\r\n            }\r\n            else if (y.name == \"attachment\") \r\n            {\r\n                vm.GetBase64String(y.value);\r\n            }\r\n            var Quantity = parseFloat(vm.FormSchema[2].Data[1].value == \"\" ? 0 : vm.FormSchema[2].Data[1].value);\r\n            var unitPrice = parseFloat(vm.FormSchema[2].Data[2].value == \"\" ? 0 : vm.FormSchema[2].Data[2].value);\r\n            //var assetCost= vm.FormSchema[2].Data[3].value;\r\n            if (y.name == \"quantity\") {\r\n                ////debugger;\r\n                if (parseFloat(y.value) > 0 && unitPrice > 0) {\r\n                    var assetCost = parseFloat(y.value) * parseFloat(unitPrice);\r\n                    vm.FormSchema[2].Data[3].value = assetCost.toFixed(3);\r\n                } else {\r\n                    vm.FormSchema[2].Data[3].value = \"0.000\";\r\n                }\r\n            }\r\n            if (y.name == \"on_behalf\") {\r\n                    let type = (y.value == \"3\") ? \"USERS\" : \"CLIENTS\";\r\n                    debugger;\r\n                    var url = `id=&moduleName=TICKETING&type=${type}&search=&refId=`;\r\n                    DataService.GetDDLData(url).then(function (response) {\r\n                    if (response.data) {\r\n                            var json = response.data;\r\n                            if (json != null) {\r\n                                var labelKey = (y.value == \"3\") ? \"Select User\" : \"Select Client\";\r\n                                vm.$refs.ManageForm.updateProperty(\"on_behalf_consumer_id\", \"value\", \"\");\r\n                                vm.$refs.ManageForm.updateProperty(\"on_behalf_consumer_id\", \"config.options\", response.data.DATA);\r\n                                vm.$refs.ManageForm.updateProperty(\"on_behalf_consumer_id\", \"label\", vm.$t(((y.value == \"3\") ? \"User\" : \"Client\")));\r\n                                vm.$refs.ManageForm.updateProperty(\"on_behalf_consumer_id\", \"placeholder\", labelKey);\r\n                                vm.$refs.ManageForm.UpdateKeyValue();\r\n                        }\r\n                    }\r\n               });\r\n            }\r\n        },\r\n        GetAssetCost(event, value) {\r\n            debugger;\r\n            var vm = this;\r\n            var Quantity = parseFloat(vm.FormSchema[2].Data[1].value == \"\" ? 0 : vm.FormSchema[2].Data[1].value);\r\n            var unitPrice = parseFloat(value);\r\n            if (value.length > 5) {\r\n                vm.FormSchema[2].Data[2].value = value.slice(0, 5);\r\n                vm.ShowAlert(vm.$t(\"The Unit Price field may not be greater than 5 characters\"), \"failure\", vm.$t('Alert'));\r\n            }\r\n            if (unitPrice > 0 && Quantity > 0) {\r\n                var assetCost = parseFloat(unitPrice) * parseFloat(Quantity);\r\n                vm.FormSchema[2].Data[3].value = assetCost.toFixed(3);\r\n            } else {\r\n                vm.FormSchema[2].Data[3].value = \"0.000\";\r\n            }\r\n        },\r\n        GetUnitPrice(val) {\r\n            debugger;\r\n            var vm = this;\r\n            var Quantity = parseFloat(vm.FormSchema[2].Data[1].value == \"\" ? 0 : vm.FormSchema[2].Data[1].value);\r\n            var unitPrice = parseFloat(vm.FormSchema[2].Data[2].value == \"\" ? 0 : vm.FormSchema[2].Data[2].value);\r\n            if (Quantity > 0 && unitPrice > 0) {\r\n                var assetCost = parseFloat(unitPrice) * parseFloat(Quantity);\r\n                vm.FormSchema[2].Data[3].value = assetCost.toFixed(3);\r\n            } else {\r\n                vm.FormSchema[2].Data[3].value = \"0.000\";\r\n            }\r\n        },\r\n\r\n\r\n        Submit () {\r\n            var vm = this;\r\n            if (vm.getvalues.sub_module_code.toUpperCase() == 'MANAGE_PRODUCT') {\r\n                vm.$refs.ManageForm.validateForm.validate().then(result => {\r\n                if (result) {\r\n                vm.isLoading = true;\r\n                var CustomFieldArray = vm.$refs.ManageForm.ConvertDynamicFormObjToCustomFieldObj(vm.FormSchema);\r\n                CustomFieldArray.forEach((item, index) => {\r\n                    if (item.field_name == 'type') {\r\n                        if (item.field_value == true) {\r\n                            item.field_value = 1;\r\n                        } else {\r\n                            item.field_value = 2;\r\n                        }\r\n                    }\r\n                    if (item.field_name == 'create_unique_name_list') {\r\n                        if (item.field_value == true) {\r\n                            item.field_value = 1;\r\n                        } else {\r\n                            item.field_value = 0;\r\n                        }\r\n                    }\r\n                    if (item.field_name == 'location_id') {\r\n                        item.field_value = vm.TreeValue == null ? 0 : vm.TreeValue;\r\n                    }\r\n                    if (item.field_name == 'unit_price') {\r\n                        if (vm.FormSchema[2].Data[2].value > 0) {\r\n                            item.field_value = vm.FormSchema[2].Data[2].value;\r\n                        } else {\r\n                            item.field_value = 0;\r\n                        }\r\n                    }\r\n                    if (item.field_name == 'asset_cost') {\r\n                        item.field_value = vm.FormSchema[2].Data[3].value;\r\n                    }\r\n                    if (item.field_name === 'tag_id') {\r\n                        const tagIdArray = item.field_value;\r\n                        tagIdArray.forEach(tagObject => {\r\n                            tagObject.tagId = tagObject.value; // Assuming 'value' holds the ID\r\n                        });\r\n                        const tagIdString = tagIdArray.map(tagObject => tagObject.tagId).join(',');\r\n                        item.field_value = tagIdString;\r\n                    }\r\n                })\r\n\r\n                var obj = {\r\n                    data: CustomFieldArray,\r\n                    moduleCode: \"Asset\",\r\n                    subModuleCode: \"Manage_Product\",\r\n                    attachmentData: vm.fileMulitpleData.length > 0 ? vm.fileMulitpleData : null\r\n                }\r\n                //debugger;\r\n                DataService.IsDuplicateAssetCatalog(JSON.stringify(obj)).then(function (response) {\r\n                    //debugger;\r\n                    if (response.data.isSave) {\r\n                        let newItem = {\r\n                            field_name: 'item_code',\r\n                            field_value: response.data.itemCode\r\n                        };\r\n                        obj.data.push(newItem)\r\n                        DataService.SaveDynamicForm(JSON.stringify(obj)).then(function (response) {\r\n                            if (response != null && response.data != null && response.data[0].Status == \"Success\") {\r\n                                vm.ShowAlert(vm.$t(\"Product has been Saved Successfully\"), \"success\", vm.$t('Alert'));\r\n                                // vm.ShowAlert(vm.$t(\"ProductSave\", [vm.$t(\"Product\")]), \"success\", true, vm.$t(\"Alert\"));                            \r\n                                vm.closepopup();\r\n                                //     if(btnType.name=='SaveAndNew'){\r\n                                //     vm.close();\r\n                                //     setTimeout(() => {\r\n                                //         if (vm.popupCondition == '') {\r\n                                //             vm.$parent.OpenModelAddProduct();\r\n                                //         } else {\r\n                                //             vm.$parent.showadvancesettingpopup(vm.popupCondition);\r\n                                //         }                                    \r\n                                //     }, 400); \r\n                                //     vm.isLoading=false;                      \r\n                                // }\r\n                                vm.isLoading = false;\r\n                            } else {\r\n                                vm.ShowAlert(vm.$t(\"ErrorWhileSaving\", [vm.$t(\"Product\")]), \"danger\", true, vm.$t(\"Alert\"));\r\n                                if (vm.popupCondition == 'setup') {\r\n                                    vm.$parent.ShowAddProduct = false;\r\n                                } else {\r\n                                    //vm.$parent.FetchData();\r\n                                    //vm.getForm();\r\n                                }\r\n                                vm.isLoading = false;\r\n                            }\r\n                        })\r\n                    }\r\n                    else {\r\n                        vm.ShowAlert((vm.$t(\"AlreadyExistRec\")), \"danger\", true, vm.$t(\"Alert\"));\r\n                        vm.isLoading = false;\r\n                    }\r\n                });\r\n                    }\r\n                }); \r\n            }\r\n            else{           \r\n                vm.$refs.ManageForm.validateForm.validate().then(result => {\r\n                if (result) {\r\n                        vm.isLoading = true;\r\n                        var CustomFieldArray = vm.$refs.ManageForm.ConvertDynamicFormObjToCustomFieldObj(vm.FormSchema, true);\r\n                        var obj = {\r\n                            data: CustomFieldArray,\r\n                            moduleCode: vm.modulename,\r\n                            subModuleCode: vm.submodulecode,\r\n                            attachmentData: vm.fileMulitpleData.length > 0 ? vm.fileMulitpleData : null\r\n                        }\r\n                        DataService.SaveDynamicForm(JSON.stringify(obj)).then(function (response) {\r\n                            \r\n                            if(response.data[0].Status==\"Success\"){\r\n                                vm.ShowAlert( vm.$t(vm.submodulecode)+ \"  \" + vm.$t('AddedSuccesss'), \"success\", true, vm.$t(\"Alert\"));\r\n                                vm.closepopup();\r\n                            }\r\n                        })  \r\n                    }\r\n                    vm.isLoading = false;\r\n                })\r\n            }\r\n        },\r\n        updateCkeditorModel: function (e, x) {\r\n            x.fieldInfo.value = e;\r\n        },\r\n        onReady(editor) {\r\n            editor.ui.getEditableElement().parentElement.insertBefore(\r\n                editor.ui.view.toolbar.element,\r\n                editor.ui.getEditableElement()\r\n            );\r\n        },\r\n        GetLocationByCompanyId: async function () {\r\n            var vm = this;\r\n            var url = `reqForm=assetassignment`\r\n            await DataService.GetLocationByuserId(url).then(response => {\r\n                vm.FindalLocationArray = [];\r\n                if ((typeof (vm.$route.params.reqForm) != 'undefined') && (vm.$route.params.reqForm != 'pendingRequest' || vm.GetParentDetails == '' || vm.GetParentDetails == null)) {\r\n                    vm.TreeValue = response.data.data[0].COMPANY_LOCATION_ID;\r\n                } else {\r\n                    vm.TreeValue = null;\r\n                }\r\n                response.data.data.forEach((value) => {\r\n                    var CheckIfExist = vm.FindalLocationArray.filter(function (el) {\r\n                        return el.COMPANY_LOCATION_ID == value.COMPANY_LOCATION_ID;\r\n                    });\r\n                    if (CheckIfExist.length == 0) {\r\n                        if (value.PARENT_LOCATION_ID == null) {\r\n                            let locationId = value.COMPANY_LOCATION_ID\r\n                            let rslt = vm.getChildLocation(locationId, value, response.data.data)\r\n                            vm.FindalLocationArray.push(rslt)\r\n                        }\r\n                    }\r\n                });\r\n                vm.options = vm.FindalLocationArray;\r\n            });\r\n        },\r\n        getChildLocation: function (locationId, currentItem, data) {\r\n            let vm = this;\r\n            let treeArray = {};\r\n            treeArray = {\r\n                id: currentItem.COMPANY_LOCATION_ID,\r\n                label: currentItem.LOCATION_NAME\r\n            }\r\n            let retrunArray = treeArray;\r\n            var childArray = data.filter(function (el) {\r\n                return el.PARENT_LOCATION_ID == locationId;\r\n            });\r\n            let finalChildArray = [];\r\n            childArray.forEach((value) => {\r\n                let ChildfolderId = value.COMPANY_LOCATION_ID\r\n                var CheckIfExist1 = finalChildArray.filter(function (el) {\r\n                    return el.COMPANY_LOCATION_ID == value.COMPANY_LOCATION_ID;\r\n                });\r\n                if (CheckIfExist1.length == 0) {\r\n                    var CheckIfExist = data.filter(function (el) {\r\n                        return el.PARENT_LOCATION_ID == ChildfolderId;\r\n                    });\r\n                    if (CheckIfExist != null && CheckIfExist.length > 0) {\r\n                        let rslt = vm.getChildLocation(ChildfolderId, value, data);\r\n                        finalChildArray.push(rslt);\r\n                    } else {\r\n                        treeArray = {\r\n                            id: `${value.COMPANY_LOCATION_ID}`,\r\n                            label: `${value.LOCATION_NAME}`\r\n                        }\r\n                        finalChildArray.push(treeArray);\r\n                    }\r\n                }\r\n            });\r\n            retrunArray.children = finalChildArray;\r\n            return retrunArray;\r\n        },\r\n        GetBase64String: function (evt) {\r\n            debugger\r\n\r\n            try {\r\n                var vm = this;\r\n                //var f = evt[0]; // FileList object\r\n                var f = evt.target.files[0]; // FileList object\r\n                var reader = new FileReader();\r\n                let fileObj = {};\r\n                // Closure to capture the file information.\r\n                reader.onload = (function (theFile) {\r\n                    return function (e) {\r\n                        var binaryData = e.target.result;\r\n                        //Converting Binary Data to base 64\r\n                        var base64StringEncoded = window.btoa(binaryData);\r\n                        //showing file converted to base64\r\n                        var fileName = f.name;\r\n                        vm.fileName = fileName;\r\n                        var n = fileName.lastIndexOf(\".\");\r\n                        var extensionName = fileName.substring(n + 1, fileName.length);\r\n                        vm.fileExt += \".\" + extensionName;\r\n                        var attachemnetMime = '{\"ContentType\":\"' + f.type + '\",\"Size\":\"' + f.size + '\",\"Extension\":\"' + extensionName + '\"}';\r\n                        var fileSize = f.size;\r\n                        vm.fileSize = fileSize;\r\n\r\n                        fileObj.attachement_mime = attachemnetMime,\r\n                            fileObj.fileName = fileName,\r\n                            fileObj.base64String = base64StringEncoded,\r\n                            fileObj.fileSize = f.size,\r\n                            fileObj.contentType = f.type,\r\n                            fileObj.ModuleName = 'TICKETING',\r\n                            fileObj.SubModuleCode = 'TICKETING'\r\n                        vm.fileMulitpleData.push(fileObj);\r\n                    };\r\n                })(f);\r\n                // Read in the image file as a data URL.\r\n                reader.readAsBinaryString(f);\r\n\r\n            }\r\n            catch (ex) {\r\n            }\r\n        },\r\n\r\n        GetBase64StringAsset: function (evt) {\r\n            try {\r\n                // debugger;\r\n                var vm = this;\r\n                var f = evt[0]; // FileList object\r\n                // var f = evt.target.files[0]; // FileList object\r\n                var reader = new FileReader();\r\n                let fileObj = {};\r\n                // Closure to capture the file information.\r\n                reader.onload = (function (theFile) {\r\n                    return function (e) {\r\n                        var binaryData = e.target.result;\r\n                        //Converting Binary Data to base 64\r\n                        var base64StringEncoded = window.btoa(binaryData);\r\n                        //showing file converted to base64\r\n                        var fileName = f.name;\r\n                        vm.fileName = fileName;\r\n                        var n = fileName.lastIndexOf(\".\");\r\n                        var extensionName = fileName.substring(n + 1, fileName.length);\r\n                        vm.fileExt += \".\" + extensionName;\r\n                        var attachemnetMime = '{\"ContentType\":\"' + f.type + '\",\"Size\":\"' + f.size + '\",\"Extension\":\"' + extensionName + '\"}';\r\n                        var fileSize = f.size;\r\n                        vm.fileSize = fileSize;\r\n\r\n                        fileObj.attachement_mime = attachemnetMime,\r\n                            fileObj.fileName = fileName,\r\n                            fileObj.base64String = base64StringEncoded,\r\n                            fileObj.fileSize = f.size,\r\n                            fileObj.contentType = f.type,\r\n                            fileObj.ModuleName = 'Asset',\r\n                            fileObj.SubModuleCode = 'Manage_Products'\r\n                        vm.fileMulitpleData.push(fileObj);\r\n                    };\r\n                })(f);\r\n                // Read in the image file as a data URL.\r\n                reader.readAsBinaryString(f);\r\n\r\n            }\r\n            catch (ex) {\r\n            }\r\n        },\r\n\r\n        // onChangeEventForFields: function (x, y, z) {\r\n        //     let vm = this;\r\n        //     if (y.name == \"type\") {\r\n        //         vm.FormSchema.forEach((group, gi) => {\r\n        //             ////\r\n        //             group.Data.forEach((field, fi) => {\r\n        //                 ////\r\n        //                 if (y.value) {\r\n        //                     // if (group.group_name == \"DEPLOY PRODUCT\" || group.group_name == \"DEPLOY PRODUCT DETAILS\") {\r\n        //                     //     group.visibility = true;\r\n        //                     //     if (field.name == \"deployement_type\" || field.name == \"location_id\" || field.name == \"quantity\" || field.name == \"unit_price\" || field.name == \"asset_cost\") {\r\n        //                     //         field.visibility = true;\r\n        //                     //     }\r\n        //                     // }\r\n        //                     if (field.name == \"deployement_type\" || field.name == \"location_id\" || field.name == \"quantity\" || field.name == \"unit_price\" || field.name == \"asset_cost\") {\r\n        //                         field.visibility = true;\r\n        //                         group.visibility = true;\r\n        //                     }\r\n        //                     if (field.name == \"location_id\")\r\n        //                     {\r\n        //                         field.is_required=true;    \r\n        //                     }\r\n        //                 } else {\r\n        //                     // if (group.group_name == \"DEPLOY PRODUCT\" || group.group_name == \"DEPLOY PRODUCT DETAILS\") {\r\n        //                     //     if (group.group_name == \"DEPLOY PRODUCT DETAILS\") {\r\n        //                     //         group.visibility = false;\r\n        //                     //     }\r\n        //                     //     if (field.name == \"deployement_type\" || field.name == \"location_id\" || field.name == \"quantity\" || field.name == \"unit_price\" || field.name == \"asset_cost\") {\r\n        //                     //         field.visibility = false;\r\n        //                     //     }\r\n        //                     // }\r\n        //                     if (field.name == \"deployement_type\" || field.name == \"location_id\" || field.name == \"quantity\" || field.name == \"unit_price\" || field.name == \"asset_cost\") {\r\n        //                         field.visibility = false;\r\n        //                         group.visibility = false;\r\n        //                     }\r\n        //                     if (field.name == \"location_id\")\r\n        //                     {\r\n        //                         field.is_required=false;    \r\n        //                     }\r\n        //                 }\r\n        //             });\r\n        //         });\r\n        //     }\r\n        //     if (y.name == \"attachment_path\") {\r\n        //         vm.GetBase64StringAsset(y.value);\r\n        //     }\r\n        //     var Quantity = parseFloat(vm.FormSchema[2].Data[1].value == \"\" ? 0 : vm.FormSchema[2].Data[1].value);\r\n        //     var unitPrice = parseFloat(vm.FormSchema[2].Data[2].value == \"\" ? 0 : vm.FormSchema[2].Data[2].value);\r\n        //     //var assetCost= vm.FormSchema[2].Data[3].value;\r\n        //     if (y.name == \"quantity\") {\r\n        //         ////\r\n        //         if (parseFloat(y.value) > 0 && unitPrice > 0) {\r\n        //             var assetCost = parseFloat(y.value) * parseFloat(unitPrice);\r\n        //             vm.FormSchema[2].Data[3].value = assetCost.toFixed(3);\r\n        //         } else {\r\n        //             vm.FormSchema[2].Data[3].value = \"0.000\";\r\n        //         }\r\n        //     }\r\n\r\n        // },\r\n    }\r\n}\r\n</script>\r\n","import mod from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./GetQuickAddLayoutForm.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../node_modules/thread-loader/dist/cjs.js!../../../node_modules/babel-loader/lib/index.js!../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./GetQuickAddLayoutForm.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./GetQuickAddLayoutForm.vue?vue&type=template&id=74683786&\"\nimport script from \"./GetQuickAddLayoutForm.vue?vue&type=script&lang=js&\"\nexport * from \"./GetQuickAddLayoutForm.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}