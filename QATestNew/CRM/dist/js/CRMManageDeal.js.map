{"version":3,"sources":["webpack:///./src/views/CRM/Deal/ManageDealCustomLayout.vue?b83c","webpack:///src/views/CRM/Deal/ManageDealCustomLayout.vue","webpack:///./src/views/CRM/Deal/ManageDealCustomLayout.vue?5ce0","webpack:///./src/views/CRM/Deal/ManageDealCustomLayout.vue"],"names":["render","_vm","this","_h","$createElement","_c","_self","attrs","isLoading","staticClass","_v","_s","$t","ref","buttons","FormSchema","on","saveForm","$event","showaddindustryModal","UpdateSelectJson","_e","showaddroletitleModal","showaddleadsourceModal","staticRenderFns","components","modaladdindustry","modaladdroletitle","modaladdleadsource","data","dealId","userid","companyId","username","dateFormat","type","class","text","onclick","onClick","isVisible","created","methods","getForm","ths","DataService","group","field","stateObj","onChangeEventForFields","id","y","vm","GetDropDownData","url","options","value","name","openaddIndustrypopup","openaddRoleTitlepopup","openaddLeadSourcepopup","json","moduleCode","subModuleCode","onCancel","component"],"mappings":"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","file":"js/CRMManageDeal.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('loader',{attrs:{\"is-visible\":_vm.isLoading}}),_c('section',{staticClass:\"main-content\"},[_c('div',{attrs:{\"id\":\"divMaindealData\"}},[_c('div',{staticClass:\"row\"},[_c('div',{staticClass:\"col-md-12 padding-t_8\"},[_c('div',{staticClass:\"theme-primary partition-full\"},[_c('span',{staticClass:\"p-name text-white\"},[_vm._v(_vm._s(_vm.$t('ManageDeal')))])])])]),_c('div',{staticClass:\"border p-3\"},[_c('Form',{ref:\"DealForm\"},[_c('dynamic-form',{ref:\"ManageDealForm\",attrs:{\"buttons\":_vm.buttons,\"schema\":_vm.FormSchema},on:{\"OnSubmit\":_vm.saveForm}})],1),(_vm.showaddindustryModal)?_c('modaladdindustry',{on:{\"close\":function($event){_vm.showaddindustryModal=false},\"updatedata\":_vm.UpdateSelectJson}}):_vm._e(),(_vm.showaddroletitleModal)?_c('modaladdroletitle',{on:{\"close\":function($event){_vm.showaddroletitleModal=false},\"updatedata\":_vm.UpdateSelectJson}}):_vm._e(),(_vm.showaddleadsourceModal)?_c('modaladdleadsource',{attrs:{\"callFrom\":\"deal\"},on:{\"close\":function($event){_vm.showaddleadsourceModal=false},\"updatedata\":_vm.UpdateSelectJson}}):_vm._e()],1)])])],1)}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","<template>\r\n    <div>\r\n     <loader :is-visible=\"isLoading\"></loader>\r\n     <section class=\"main-content\">\r\n         <div id=\"divMaindealData\" v-cloak>\r\n            <div class=\"row\">\r\n                 <div class=\"col-md-12 padding-t_8\">\r\n                     <div class=\"theme-primary partition-full\">\r\n                         <span class=\"p-name text-white\">{{$t('ManageDeal')}}</span>\r\n                     </div>\r\n                 </div>\r\n             </div>\r\n             <div class=\"border p-3\">\r\n                <Form ref=\"DealForm\">\r\n                    <dynamic-form  ref=\"ManageDealForm\" :buttons=\"buttons\" :schema=\"FormSchema\" v-on:OnSubmit=\"saveForm\"></dynamic-form>\r\n                </Form>   \r\n                <modaladdindustry v-if=\"showaddindustryModal\" @close=\"showaddindustryModal=false\"\r\n                    @updatedata=\"UpdateSelectJson\"></modaladdindustry>\r\n                <modaladdroletitle v-if=\"showaddroletitleModal\" @close=\"showaddroletitleModal=false\"\r\n                    @updatedata=\"UpdateSelectJson\"></modaladdroletitle>\r\n                <modaladdleadsource v-if=\"showaddleadsourceModal\" callFrom=\"deal\"\r\n                         @close=\"showaddleadsourceModal=false\" @updatedata=\"UpdateSelectJson\">\r\n                </modaladdleadsource>\r\n             </div>\r\n         </div>\r\n     </section>\r\n    </div>\r\n</template>\r\n<script>\r\nimport DataService from \"../../../services/DataService\";\r\nimport modaladdindustry from '../../../components/Common/Modal/modaladdindustry.vue'\r\nimport modaladdroletitle from '../../../components/Common/Modal/modaladdroletitle.vue'\r\nimport modaladdleadsource from '../../../components/Common/Modal/modaladdleadsource.vue'\r\nexport default {\r\n    components: {\r\n        modaladdindustry,\r\n        modaladdroletitle,\r\n        modaladdleadsource\r\n    },\r\n    data(){\r\n        return{\r\n            isLoading:false,\r\n            dealId: this.$route.params.id,\r\n            showaddindustryModal: false,                 \r\n            showaddroletitleModal: false,\r\n            showaddleadsourceModal: false,\r\n            userid: null,\r\n            companyId: null,\r\n            username: null,\r\n            dateFormat:null,\r\n            FormSchema:[],\r\n            buttons: [{\r\n                    type: \"submit\",\r\n                    class: \"btn btn-success\",\r\n                    text: \"<i class='fa fa-save pr-2'></i>Save\",\r\n                    onclick: this.saveForm\r\n                },\r\n                {\r\n                    type: \"button\",\r\n                    class: \"btn btn-danger\",\r\n                    text: \"<i class='fa fa-close pr-2'></i>Cancel\",\r\n                    onClick: this.onCancel,\r\n                    isVisible: true,\r\n                },\r\n            ],\r\n        }\r\n    },\r\n    created: function () {  \r\n        var vm=this;\r\n        this.userid = this.GetUserInfo.ID;\r\n        this.companyId = this.GetUserInfo.CompanyId;\r\n        this.username = this.GetUserInfo.Name;\r\n        this.dateFormat=this.GetUserInfo.DateFormat;\r\n        this.getForm(vm.dealId);\r\n    },\r\n    methods:{\r\n        getForm: function (id) { \r\n            var ths = this;\r\n            ths.isLoading = true;\r\n            var url = `recordId=${id}&moduleName=CRM&subModuleCode=CRM_DEALS&langCode=en`;\r\n            DataService.GetDynamicForm(url).then(function (response) {\r\n                if (response != null && response.data != null) { \r\n                    debugger\r\n                    ths.FormSchema = ths.$refs.ManageDealForm.ConvertCustomFieldIntoDynamicFormObj(response.data.data);                    \r\n                    ths.FormSchema.forEach((group, gi) => {\r\n                        group.Data.forEach(async  (field, fi) => {\r\n                            if (field.name == 'industry_type_id') {\r\n                                field.config.showAddIcon = true;\r\n                                field.config.onAddButtonClick = ths.openaddIndustrypopup;\r\n                            }\r\n                            if (field.name == \"lead_source_id\") {\r\n                                field.config.showAddIcon = true;\r\n                                field.config.onAddButtonClick = ths.openaddLeadSourcepopup;\r\n                            }\r\n                            if (field.name == \"role_title_id\") {\r\n                                field.config.showAddIcon = true;\r\n                                field.config.onAddButtonClick = ths.openaddRoleTitlepopup;\r\n                            }\r\n                            if (field.name == 'deal_state' && field.value=='') {\r\n                                field.config.options = null;\r\n                            }\r\n                            if (field.name == 'deal_country' && field.value !='') {\r\n                                var stateObj = group.Data.filter(x=>x.name=='deal_state')[0];\r\n                                await ths.GetDropDownData('ACCOUNT_STATE', stateObj, field.value,'EDIT');\r\n                            }\r\n                            if (field.name == 'closing_date' && field.value == '') {\r\n                                field.value = new Date();\r\n                            }\r\n                            field.config.onChange = ths.onChangeEventForFields;\r\n                        });\r\n                    });          \r\n                    ths.isLoading = false;\r\n                }\r\n            });\r\n        },        \r\n        onChangeEventForFields: function (x, y, z) {            \r\n            let ths = this;\r\n            var vm = this;\r\n            if (y.name == \"deal_country\") {\r\n                ths.FormSchema.forEach((group, gi) => {\r\n                    group.Data.forEach(async (field, fi) => {\r\n                        if(field.name==\"deal_state\"){\r\n                            let id = y.value;\r\n                            await vm.GetDropDownData('ACCOUNT_STATE', field, id,null);\r\n                        }\r\n                    })\r\n                })\r\n            }\r\n        },\r\n        GetDropDownData: async function (type, field, id, action) {\r\n            var vm=this;\r\n            var url = `id=&moduleName=CRM&type=${type}&refId=${id}`;            \r\n            await DataService.getDDLData(url+ \"&search=\").then(response => {\r\n                if(response.data.DATA != undefined){\r\n                    var options = response.data.DATA;\r\n                    field.config.options = [];\r\n                    if(action !='EDIT'){\r\n                        field.value='';\r\n                    }\r\n                    if(type=='ACCOUNT_STATE'){\r\n                        options.forEach((item) => {\r\n                            field.config.options.push({\r\n                                value: item.value,\r\n                                name: item.name\r\n                            })\r\n                        })\r\n                    }\r\n                    vm.$refs.ManageDealForm.UpdateKeyValue();\r\n                }\r\n            });\r\n        },\r\n        openaddIndustrypopup: function () { \r\n            var vm =this;\r\n            vm.showaddindustryModal = true;\r\n        },\r\n        openaddRoleTitlepopup: function (item) {\r\n            this.RoleTitleItemObject = item;\r\n            this.showaddroletitleModal = true;\r\n        },\r\n        openaddLeadSourcepopup: function (item) {\r\n            this.LeadSourceItemObject = item;\r\n            this.showaddleadsourceModal = true;\r\n        },\r\n        UpdateSelectJson:function(name,json){\r\n            let ths = this;\r\n            ths.FormSchema.forEach((group, gi) => {\r\n                group.Data.forEach((field, fi) => {\r\n                    if(field.name==name){\r\n                        if(json !=null){\r\n                            field.config.options=[];\r\n                            json.forEach(x=>{\r\n                                field.config.options.push({name:x.name,value:x.value});\r\n                            })\r\n                        }\r\n                    }\r\n                })\r\n            })\r\n        },\r\n        saveForm(){\r\n           // debugger\r\n            var ths = this;\r\n            ths.$refs.DealForm.validate().then(result => {\r\n                if (result) {\r\n                    ths.isLoading = true;\r\n                    var CustomFieldArray = ths.$refs.ManageDealForm.ConvertDynamicFormObjToCustomFieldObj(ths.FormSchema);\r\n                    var obj = {\r\n                        data: CustomFieldArray,\r\n                        moduleCode: \"CRM\",\r\n                        subModuleCode: \"CRM_DEALS\"\r\n                    }\r\n                    DataService.SaveDynamicForm(JSON.stringify(obj)).then(function (response) {\r\n                       // debugger\r\n                        if (response != null && response.data != null && response.data[0].Status == \"Success\") {\r\n                            if(ths.dealId > 0)\r\n                            {\r\n                                ths.ShowAlert(ths.$t('UpdatedSuccess',[ths.$t('Deal')]),\"success\", true, ths.$t(\"Alert\"));\r\n                                ths.$router.push({ name: 'CRMDeal' });\r\n                            }\r\n                            else\r\n                            {\r\n                                ths.ShowAlert(ths.$t('AddedSuccess',[ths.$t('Deal')]), \"success\", true,  ths.$t(\"Alert\"));\r\n                                ths.$router.push({ name: 'CRMDeal' });\r\n                            }\r\n                        }\r\n                    })\r\n                    ths.isLoading = false;\r\n                }    \r\n            })\r\n        },\r\n        onCancel:function(){\r\n            var vm =this;\r\n            vm.$router.push({ name: 'CRMDeal' });\r\n           \r\n        },\r\n    }\r\n}\r\n</script>","import mod from \"-!../../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../../node_modules/thread-loader/dist/cjs.js!../../../../node_modules/babel-loader/lib/index.js!../../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ManageDealCustomLayout.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../../../node_modules/cache-loader/dist/cjs.js??ref--13-0!../../../../node_modules/thread-loader/dist/cjs.js!../../../../node_modules/babel-loader/lib/index.js!../../../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ManageDealCustomLayout.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./ManageDealCustomLayout.vue?vue&type=template&id=7aa37ba0&\"\nimport script from \"./ManageDealCustomLayout.vue?vue&type=script&lang=js&\"\nexport * from \"./ManageDealCustomLayout.vue?vue&type=script&lang=js&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\nexport default component.exports"],"sourceRoot":""}